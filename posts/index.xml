<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Vassilis Sioros | Software / Machine Learning Engineer</title><link>https://billsioros.github.io/posts/</link><description>Recent content in Posts on Vassilis Sioros | Software / Machine Learning Engineer</description><generator>Hugo 0.125.0</generator><language>en-us</language><lastBuildDate>Wed, 17 Apr 2024 13:52:18 +4421</lastBuildDate><atom:link href="https://billsioros.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Let's Talk Python Metaclasses</title><link>https://billsioros.github.io/posts/python-metaclasses/</link><pubDate>Wed, 17 Apr 2024 13:52:18 +4421</pubDate><guid>https://billsioros.github.io/posts/python-metaclasses/</guid><description>Python metaclasses are like class architects, giving you control over how classes are born and behave. They act as blueprints, shaping class inheritance and behavior. Just as classes govern instances, metaclasses oversee classes. So, when you create a class in Python, its metaclass dictates its behavior. Everything in Python, including classes, is an object, and metaclasses add flavor to their behavior.
The Metaclass You&amp;rsquo;re Probably Using Without Realizing It Ever heard of a metaclass called abc.</description></item></channel></rss>