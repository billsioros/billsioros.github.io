<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Python on Vassilis Sioros | Software / Machine Learning Engineer</title><link>https://billsioros.github.io/tags/python/</link><description>Recent content in Python on Vassilis Sioros | Software / Machine Learning Engineer</description><generator>Hugo 0.125.1</generator><language>en-us</language><lastBuildDate>Wed, 17 Apr 2024 13:52:18 +4421</lastBuildDate><atom:link href="https://billsioros.github.io/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>Let's Talk Python Metaclasses</title><link>https://billsioros.github.io/posts/python-metaclasses/</link><pubDate>Wed, 17 Apr 2024 13:52:18 +4421</pubDate><guid>https://billsioros.github.io/posts/python-metaclasses/</guid><description>Python metaclasses give you control over class creation and behavior. They act as blueprints, shaping inheritance and behavior. Just as classes govern instances, metaclasses oversee classes.
A little know gem Ever heard of a metaclass called abc.ABC? Chances are you&amp;rsquo;ve been using it without even realizing it. This little gem is pretty handy for crafting abstract base classes (ABCs) in Python. It&amp;rsquo;s like the rulebook that says, &amp;ldquo;Hey, if you&amp;rsquo;re a subclass, you gotta follow these rules and implement these methods.</description></item></channel></rss>