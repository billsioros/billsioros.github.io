<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Programming Patterns on Vassilis Sioros | Software / Machine Learning Engineer</title><link>https://billsioros.github.io/tags/programming-patterns/</link><description>Recent content in Programming Patterns on Vassilis Sioros | Software / Machine Learning Engineer</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Wed, 17 Apr 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://billsioros.github.io/tags/programming-patterns/index.xml" rel="self" type="application/rss+xml"/><item><title>Let's Talk Python Metaclasses</title><link>https://billsioros.github.io/posts/python-metaclasses/</link><pubDate>Wed, 17 Apr 2024 00:00:00 +0000</pubDate><guid>https://billsioros.github.io/posts/python-metaclasses/</guid><description>&lt;p>Python metaclasses give you control over class creation and behavior. They act as blueprints, shaping inheritance and behavior. Just as classes govern instances, metaclasses oversee classes.&lt;/p>
&lt;h2 id="a-little-know-gem">A little know gem&lt;/h2>
&lt;p>Ever heard of a metaclass called &lt;code>abc.ABC&lt;/code>? Chances are you&amp;rsquo;ve been using it without even realizing it. This little gem is pretty handy for crafting abstract base classes (ABCs) in Python. It&amp;rsquo;s like the rulebook that says, &lt;em>&amp;ldquo;Hey, if you&amp;rsquo;re a subclass, you gotta follow these rules and implement these methods.&amp;rdquo;&lt;/em>&lt;/p></description></item></channel></rss>